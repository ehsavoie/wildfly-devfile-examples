schemaVersion: 2.2.0
metadata:
  name: wildfly-start
  version: 2.0.0
  website: https://wildfly.org
  displayName: WildFly Getting Started
  description: Upstream WildFly Getting Started
  icon: https://design.jboss.org/wildfly/logo/final/wildfly_logomark.svg
  tags: ['Java', 'WildFly']
  projectType: 'wildfly'
  language: 'java'
variables:
  imageRegistry: 'quay.io'
starterProjects:
  - name: getting-started
    description: WildFly Getting Started
    git:
      checkoutFrom:
        remote: wildfly-devfile-examples
        revision: getting-started
      remotes:
        wildfly-devfile-examples: https://github.com/wildfly-extras/wildfly-devfile-examples.git
components:
  - name: tools
    container:
      image:  quay.io/devfile/universal-developer-image:ubi8-c0b5f15
     #image: registry.redhat.io/devspaces/udi-rhel8:3.7
      memoryLimit: 1512Mi
      mountSources: true
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      env:
        - name: JAVA_OPTS
          value: '-Djava.security.egd=file:/dev/urandom -Djboss.host.name=localhost'
        - name: DEBUG_PORT
          value: '5005'
        - name: NODE_NAME
          value: 'getting-started'
        - name: IMAGE_REGISTRY
          value: '{{imageRegistry}}'
          #value: 'image-registry.openshift-image-registry.svc:5000'
        - name: IMAGE
          value: 'getting-started'
      endpoints:
        - name: debug
          exposure: internal
          protocol: tcp
          targetPort: 5005
        - name: 'http'
          protocol: http
          targetPort: 8080
          exposure: public
        - name: 'management'
          targetPort: 9990
          protocol: http
          exposure: internal
        - name: 'transaction'
          protocol: tcp
          targetPort: 4172
          exposure: internal
  - name: m2
    volume:
      size: 3Gi
commands:
  - id: package
    exec:
      label: "Build the application."
      component: tools
      commandLine: mvn clean verify
      workingDir: ${PROJECT_SOURCE}
      hotReloadCapable: true
      group:
        kind: build
        isDefault: true
  - id: run
    exec:
      label: "Build and run the application in dev mode."
      component: tools
      commandLine: mvn -Dwildfly.javaOpts="-Djboss.host.name=${NODE_NAME}" -Dmaven.test.skip=true clean package org.wildfly.plugins:wildfly-maven-plugin:dev
      workingDir: ${PROJECT_SOURCE}
      hotReloadCapable: true
      group:
        kind: run
        isDefault: true
  - id: debug
    exec:
      label: "Build and debug the application in dev mode."
      component: tools
      commandLine: mvn -Dwildfly.javaOpts="-Djboss.host.name=${NODE_NAME} -agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n" -Dmaven.test.skip=true clean package org.wildfly.plugins:wildfly-maven-plugin:dev
      workingDir: ${PROJECT_SOURCE}
      hotReloadCapable: true
      group:
        kind: debug
        isDefault: true
  - id: build-runtime-image
    exec:
      label: "Openshift 01 - Build Runtime Image."
      component: tools
      commandLine: "mvn -Dmaven.test.skip=true clean package && podman build -f Containerfile -t ${IMAGE_REGISTRY}/${IMAGE_REGISTRY_NAMESPACE}/${IMAGE} ."
      workingDir: ${PROJECT_SOURCE}
      group:
        kind: build
        isDefault: false
  - id: push-image
    exec:
      label: "Openshift 02 - Push Image into OpenShift registry."
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: "podman tag ${IMAGE_REGISTRY}/${IMAGE_REGISTRY_NAMESPACE}/${IMAGE} ${IMAGE_REGISTRY}/${IMAGE_REGISTRY_NAMESPACE}/${IMAGE}:latest && podman login  ${IMAGE_REGISTRY} -u ${IMAGE_REGISTRY_LOGIN} -p ${IMAGE_REGISTRY_PASSWORD} && podman push --tls-verify=false ${IMAGE_REGISTRY}/${IMAGE_REGISTRY_NAMESPACE}/${IMAGE}:latest"
      group:
        kind: build
        isDefault: false
  - id: deploy-image
    exec:
      label: "Openshift 03 - Deploy Image into OpenShift."
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: "helm repo add wildfly https://docs.wildfly.org/wildfly-charts/ && oc set image-lookup ${IMAGE} && helm install ${IMAGE} -f .charts/helm.yaml --set build.enabled=false --set image.name=${IMAGE} wildfly/wildfly"
      group:
        kind: run
        isDefault: false
  - id: undeploy-image
    exec:
      label: "Undeploy Image from OpenShift."
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: "helm uninstall ${IMAGE}"
      group:
        kind: run
        isDefault: false

